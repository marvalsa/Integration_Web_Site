# version: '3'
# services:
#   dev_website:
#     build: .
#     container_name: dev_website
#     ports:
#       - "3000:3000"
#     volumes:
#       - .:/app
#       - /app/node_modules
#     environment:
#       - PG_HOST=postgres
#       - PG_DATABASE=website
#       - PG_USER=trespiadmin
#       - PG_PASSWORD=W3bsite3Pi2o25
#       - PG_PORT=5432
#       - ZOHO_CLIENT_ID=${ZOHO_CLIENT_ID}
#       - ZOHO_CLIENT_SECRET=${ZOHO_CLIENT_SECRET}
#       - ZOHO_REFRESH_TOKEN=${ZOHO_REFRESH_TOKEN}
#     depends_on:
#       - postgres
#     restart: "no"  # 游대 No reiniciar autom치ticamente

#   postgres:
#     image: postgres:16
#     container_name: dev_postgres
#     ports:
#       - "5432:5432"
#     environment:
#       POSTGRES_USER: trespiadmin
#       POSTGRES_PASSWORD: W3bsite3Pi2o25
#       POSTGRES_DB: website
#     volumes:
#       - postgres_data:/var/lib/postgresql/data

# volumes:
#   postgres_data:

#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# version: '3'
# services:
#   dev_website:
#     build: .
#     container_name: dev_website
#     ports:
#       - "3000:3000"
#     volumes:
#       - .:/app
#     environment:
#       - ZOHO_CLIENT_ID=${ZOHO_CLIENT_ID}
#       - ZOHO_CLIENT_SECRET=${ZOHO_CLIENT_SECRET}
#       - ZOHO_REFRESH_TOKEN=${ZOHO_REFRESH_TOKEN}
#       - PG_HOST=${PG_HOST}
#       - PG_DATABASE=${PG_DATABASE}
#       - PG_USER=${PG_USER}
#       - PG_PASSWORD=${PG_PASSWORD}
#       - PG_PORT=${PG_PORT}
#     restart: no # 游대 No reiniciar autom치ticamente
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

version: '3.8' # Usar una versi칩n m치s reciente como 3.8 si es posible

services:
  # Servicio para ejecutar el script de sincronizaci칩n Node.js
  sync_job: # Renombrado para mayor claridad (antes dev_website)
    build: . # Construye la imagen usando el Dockerfile local
    container_name: sync_job_runner # Nombre opcional
    # No necesitas 'ports' porque el script no escucha conexiones
    # ports:
    #   - "3000:3000"
    # No montes el volumen local '.' para un script de ejecuci칩n,
    # queremos usar el c칩digo COPIADO en la imagen durante el build.
    # Los montajes son para desarrollo con hot-reload.
    # volumes:
    #   - .:/app
    #   - /app/node_modules # Tampoco necesario sin el montaje de '.'
    environment:
      # Carga las variables desde el archivo .env o el entorno del host
      - ZOHO_CLIENT_ID=${ZOHO_CLIENT_ID}
      - ZOHO_CLIENT_SECRET=${ZOHO_CLIENT_SECRET}
      - ZOHO_REFRESH_TOKEN=${ZOHO_REFRESH_TOKEN}
      - PG_HOST=${PG_HOST} # Deber칤a ser 'postgres' seg칰n .env
      - PG_DATABASE=${PG_DATABASE}
      - PG_USER=${PG_USER}
      - PG_PASSWORD=${PG_PASSWORD}
      - PG_PORT=${PG_PORT}
      - PG_SSL=${PG_SSL} # A침adido por si lo necesitas
      # - NODE_ENV=production # Puedes a침adir esto si tu script lo usa
    depends_on:
      postgres: # Asegura que el servicio 'postgres' se inicie antes
        condition: service_healthy # (Opcional pero recomendado) Espera a que PG est칠 listo
    restart: "no" # 游대 No reiniciar autom치ticamente, es una tarea puntual
    # Agregar logs_output como volumen
    # volumes: 
    #   - ./logs_output:/app/logs # Mapea ./logs_output en tu host a /app/logs en el contenedor

  # Servicio de Base de Datos PostgreSQL
  postgres:
    image: postgres:16
    container_name: dev_postgres_sync # Nombre 칰nico
    ports:
      # Exponer el puerto al host es 칰til para conectar herramientas de BD externas
      - "5433:5432" # Usar un puerto diferente en el host (5433) si 5432 ya est치 ocupado
    environment:
      # Estas credenciales DEBEN COINCIDIR con las usadas por la app (PG_USER, PG_PASSWORD, PG_DATABASE)
      POSTGRES_USER: ${PG_USER} # Mejor usar variables tambi칠n aqu칤
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DATABASE}
    volumes:
      - postgres_sync_data:/var/lib/postgresql/data # Volumen para persistir datos
    healthcheck: # (Opcional pero recomendado) Define c칩mo comprobar si PG est치 listo
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5

# Definir el volumen nombrado para persistencia de datos de PG
volumes:
  postgres_sync_data: